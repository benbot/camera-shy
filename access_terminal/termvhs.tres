[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://kerda10agudc"]

[sub_resource type="Shader" id="Shader_2mkyy"]
code = "shader_type spatial;

render_mode unshaded, fog_disabled;

uniform float range : hint_range(0.0, 0.1, 0.005)= 0.05;
uniform float noiseQuality : hint_range(0.0, 300.0, 0.1)= 250.0;
uniform float noiseIntensity : hint_range(-0.6, 0.6, 0.0010)= 0.0088;
uniform float offsetIntensity : hint_range(-0.1, 0.1, 0.001) = 0.03;
uniform float colorOffsetIntensity : hint_range(0.0, 5.0, 0.001) = 1.3;
uniform sampler2D SCREEN_TEXTURE;
float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float verticalBar(float pos, float UVY, float offset)
{
    float edge0 = (pos - range);
    float edge1 = (pos + range);

    float x = smoothstep(edge0, pos, UVY) * offset;
    x -= smoothstep(pos, edge1, UVY) * offset;
    return x;
}

void vertex() {
	POSITION = vec4(VERTEX.xy, 1.0, 1.0);
}

const float saturation = 0.2;
uniform sampler2D depth_texture : source_color, hint_depth_texture;
uniform bool useDepth = false;
void fragment()
{
    vec2 uv = SCREEN_UV;
    for (float i = 0.0; i < 0.71; i += 0.1313)
    {
        float d = mod(TIME * i, 1.7);
        float o = sin(1.0 - tan(TIME * 0.24 * i));
    	o *= offsetIntensity;
        uv.x += verticalBar(d, UV.y, o);
    }

    float UVY = uv.y;
    UVY *= noiseQuality;
    UVY = float(int(UVY)) * (1.0 / noiseQuality);
    float noise = rand(vec2(TIME * 0.00001, UVY));
    uv.x += noise * noiseIntensity;

    vec2 offsetR = vec2(0.009 * sin(TIME), 0.0) * colorOffsetIntensity;
    vec2 offsetG = vec2(0.0073 * (cos(TIME * 0.97)), 0.0) * colorOffsetIntensity;

    float r = texture(SCREEN_TEXTURE, uv + offsetR).r;
    float g = texture(SCREEN_TEXTURE, uv + offsetG).g;
    float b = texture(SCREEN_TEXTURE, uv).b;
    vec4 tex = vec4(r, g, b, 1.0);
    ALBEDO = tex.rgb;
	vec4 color = texture(SCREEN_TEXTURE, vec2(UV.x, -UV.y));


	float depth = texture(depth_texture, SCREEN_UV).r;
	//ALBEDO = vec3(depth * 3.0);
	float mask = step(0.1, depth);
	ALPHA = color.a - (depth * 100.0);
}"

[resource]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_2mkyy")
shader_parameter/range = 0.05
shader_parameter/noiseQuality = 250.0
shader_parameter/noiseIntensity = 0.01
shader_parameter/offsetIntensity = 0.03
shader_parameter/colorOffsetIntensity = 1.3
shader_parameter/useDepth = false
