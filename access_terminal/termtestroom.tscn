[gd_scene load_steps=22 format=3 uid="uid://dvt325p8s8d2s"]

[ext_resource type="PackedScene" uid="uid://bf3bie4safvqr" path="res://access_terminal/access_terminal.tscn" id="1_o0loh"]
[ext_resource type="PackedScene" uid="uid://bkmyxv44fgggy" path="res://camera/camera.tscn" id="2_f0dta"]
[ext_resource type="PackedScene" uid="uid://degqvhttwux42" path="res://vfx/vhs/vhs.tscn" id="3_28pp4"]
[ext_resource type="Shader" path="res://vfx/vhs/vhs.gdshader" id="4_gtp86"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_muf8n"]
sky_top_color = Color(0.239338, 0.00873085, 0.199228, 1)
sky_horizon_color = Color(0.0154628, 0.182036, 0.258602, 1)
sky_curve = 0.0326456
ground_bottom_color = Color(0.094407, 0, 0.00164497, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_6b48y"]
sky_material = SubResource("ProceduralSkyMaterial_muf8n")

[sub_resource type="Environment" id="Environment_v5j3e"]
background_mode = 2
sky = SubResource("Sky_6b48y")
tonemap_mode = 2

[sub_resource type="GDScript" id="GDScript_3rf64"]
script/source = "extends Node3D


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	rotate_y(delta * 2.0)
"

[sub_resource type="QuadMesh" id="QuadMesh_c0hyd"]
flip_faces = true
size = Vector2(2, 2)

[sub_resource type="Shader" id="Shader_sj05m"]
code = "shader_type spatial;

render_mode unshaded, fog_disabled;

uniform float range : hint_range(0.0, 0.1, 0.005)= 0.05;
uniform float noiseQuality : hint_range(0.0, 300.0, 0.1)= 250.0;
uniform float noiseIntensity : hint_range(-0.6, 0.6, 0.0010)= 0.0088;
uniform float offsetIntensity : hint_range(-0.1, 0.1, 0.001) = 0.03;
uniform float colorOffsetIntensity : hint_range(0.0, 5.0, 0.001) = 1.3;
uniform sampler2D SCREEN_TEXTURE;
float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float verticalBar(float pos, float UVY, float offset)
{
    float edge0 = (pos - range);
    float edge1 = (pos + range);

    float x = smoothstep(edge0, pos, UVY) * offset;
    x -= smoothstep(pos, edge1, UVY) * offset;
    return x;
}

void vertex() {
	POSITION = vec4(VERTEX.xy, 1.0, 1.0);
}

const float saturation = 0.2;
uniform sampler2D depth_texture : source_color, hint_depth_texture;
uniform bool useDepth = false;
void fragment()
{
    vec2 uv = SCREEN_UV;
    for (float i = 0.0; i < 0.71; i += 0.1313)
    {
        float d = mod(TIME * i, 1.7);
        float o = sin(1.0 - tan(TIME * 0.24 * i));
    	o *= offsetIntensity;
        uv.x += verticalBar(d, UV.y, o);
    }

    float UVY = uv.y;
    UVY *= noiseQuality;
    UVY = float(int(UVY)) * (1.0 / noiseQuality);
    float noise = rand(vec2(TIME * 0.00001, UVY));
    uv.x += noise * noiseIntensity;

    vec2 offsetR = vec2(0.009 * sin(TIME), 0.0) * colorOffsetIntensity;
    vec2 offsetG = vec2(0.0073 * (cos(TIME * 0.97)), 0.0) * colorOffsetIntensity;

    float r = texture(SCREEN_TEXTURE, uv + offsetR).r;
    float g = texture(SCREEN_TEXTURE, uv + offsetG).g;
    float b = texture(SCREEN_TEXTURE, uv).b;
    vec4 tex = vec4(r, g, b, 1.0);
    ALBEDO = tex.rgb;
	vec4 color = texture(SCREEN_TEXTURE, vec2(UV.x, -UV.y));


	float depth = texture(depth_texture, SCREEN_UV).r;
	//ALBEDO = vec3(depth * 3.0);
	float mask = step(0.1, depth);
	ALPHA = color.a - (depth * 100.0);
}"

[sub_resource type="ViewportTexture" id="ViewportTexture_w4clm"]
viewport_path = NodePath("SubViewport/Camera/Camera3D/SubViewport")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sxwi3"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_sj05m")
shader_parameter/range = 0.05
shader_parameter/noiseQuality = 250.0
shader_parameter/noiseIntensity = 0.01
shader_parameter/offsetIntensity = 0.03
shader_parameter/colorOffsetIntensity = 1.3
shader_parameter/useDepth = false
shader_parameter/SCREEN_TEXTURE = SubResource("ViewportTexture_w4clm")

[sub_resource type="GDScript" id="GDScript_nwxct"]
script/source = "extends MeshInstance3D


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	show()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass
"

[sub_resource type="BoxMesh" id="BoxMesh_2pt5a"]

[sub_resource type="Animation" id="Animation_l2uy3"]
resource_name = "new_animation"
length = 5.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 2.56667),
"transitions": PackedFloat32Array(1.56917, 2.14355),
"update": 0,
"values": [Vector3(-2.88697, 0.692489, 2.39827), Vector3(4.36774, 0.692489, 2.39827)]
}

[sub_resource type="Animation" id="Animation_84oe1"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(-2.88697, 0.692489, 2.39827)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_3ypdy"]
_data = {
"RESET": SubResource("Animation_84oe1"),
"new_animation": SubResource("Animation_l2uy3")
}

[sub_resource type="QuadMesh" id="QuadMesh_3cacn"]
resource_local_to_scene = true
flip_faces = true
size = Vector2(2, 2)

[sub_resource type="ViewportTexture" id="ViewportTexture_d1drl"]
viewport_path = NodePath("../../SubViewport")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vx4h0"]
resource_local_to_scene = true
render_priority = 0
shader = ExtResource("4_gtp86")
shader_parameter/range = 0.0
shader_parameter/noiseQuality = 300.0
shader_parameter/noiseIntensity = 0.003
shader_parameter/offsetIntensity = 0.07
shader_parameter/colorOffsetIntensity = 0.1
shader_parameter/useDepth = false
shader_parameter/SCREEN_TEXTURE = SubResource("ViewportTexture_d1drl")

[sub_resource type="GDScript" id="GDScript_3bbag"]
script/source = "extends MeshInstance3D


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	show()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass
"

[node name="Termtestroom" type="Node3D"]

[node name="SubViewport" type="SubViewport" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="SubViewport"]
environment = SubResource("Environment_v5j3e")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="SubViewport"]
transform = Transform3D(-0.919135, -0.265128, 0.291372, 0.393477, -0.581948, 0.711696, -0.0191272, 0.768793, 0.639211, 0, 0, 0)
light_energy = 7.565
shadow_enabled = true

[node name="AccessTerminal" parent="SubViewport" instance=ExtResource("1_o0loh")]
script = SubResource("GDScript_3rf64")

[node name="Camera" parent="SubViewport" instance=ExtResource("2_f0dta")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.887191, 5.10772)

[node name="Camera3D" parent="SubViewport/Camera" index="0"]
cull_mask = 262143

[node name="RemoteTransform3D" type="RemoteTransform3D" parent="SubViewport/Camera/Camera3D" index="0"]
remote_path = NodePath("../SubViewport/Camera3D")

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewport/Camera/Camera3D" index="1"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.743714)
visible = false
layers = 32
mesh = SubResource("QuadMesh_c0hyd")
surface_material_override/0 = SubResource("ShaderMaterial_sxwi3")
script = SubResource("GDScript_nwxct")

[node name="SubViewport" type="SubViewport" parent="SubViewport/Camera/Camera3D" index="2"]
transparent_bg = true

[node name="Camera3D" type="Camera3D" parent="SubViewport/Camera/Camera3D/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.887191, 4.56896)
cull_mask = 262144

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewport"]
transform = Transform3D(0.541047, 0, 0, 0, 3.99729, 0, 0, 0, 1, -2.88697, 0.692489, 2.39827)
mesh = SubResource("BoxMesh_2pt5a")

[node name="AnimationPlayer" type="AnimationPlayer" parent="SubViewport/MeshInstance3D"]
libraries = {
"": SubResource("AnimationLibrary_3ypdy")
}
autoplay = "new_animation"

[node name="Camera3D" type="Camera3D" parent="."]

[node name="vhs" parent="Camera3D" instance=ExtResource("3_28pp4")]
mesh = SubResource("QuadMesh_3cacn")
surface_material_override/0 = SubResource("ShaderMaterial_vx4h0")
script = SubResource("GDScript_3bbag")

[editable path="SubViewport/Camera"]
